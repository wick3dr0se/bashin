#!/bin/bash
# see usage in test.sh

set -a
#shopt -s expand_aliases

4BIT() { # ANSI escape color codes
	local bg_clr fg_clr fx col
	declare -A bg_clr fg_clr fx
bg_clr=(
[black]=40	[bright_black]=100
[red]=41	[bright_red]=101
[green]=42	[bright_green]=102
[yellow]=43	[bright_yellow]=103
[blue]=44	[bright_blue]=104
[purple]=45	[bright_purple]=105
[light-blue]=46	[bright_light_blue]=106
[white]=47	[bright_white]=107
)
fg_clr=(
[black]=30	[bright_black]=90
[red]=31	[bright_red]=91
[green]=32	[bright_green]=92
[yellow]=33	[bright_yellow]=93
[blue]=34	[bright_blue]=94
[purple]=35	[bright_purple]=95
[light-blue]=36	[bright_light_blue]=96
[white]=37	[bright_white]=97
)
fx=(
[bold]=1
[dim]=2
[italic]=3
[underline]=4
[blink]=5
[fast-blink]=6
[reverse]=7
[hidden]=8
[strikeout]=9
)

	for col in ${!fg_clr[@]} ${!bg_clr[@]} ${!fx[@]} ; do
		case $col in
			$2) fg_clr="${fg_clr[$col]}" ;;
			$3) [[ $4 ]] && bg_clr="${bg_clr[$col]};" || fx="${fx[$col]};" ;;
			$4) fx="${fx[$col]};" ;;
		esac
	done
	printf '\e[%s%s%sm%s\e[0m\n' "$fx" "$bg_clr" "$fg_clr" "$1"
}

ANSI() {
	local cursor val val2 erase col
	
	IFS=- read x val val2 <<<$1

	declare -A cursor erase
cursor=(
[home]='\e[H'
[position]="\e[${val};${val2}H"
[up]="\e[${val}A"
[down]="\e[${val}B"
[right]="\e[${val}C"
[left]="\e[${val}D"
[^down]="\e[${val}E"
[^up]="\e[${val}F"
[col]="\e[${val}G"
[cursor]='\e[6n'
[up-scroll]='\M'
[save]='\7'
[restore]='\8'
)
erase=(
[del_cursor]='\e[J'
[del_cursor-start]='\e[1J'
[del_screen]='\e[2J'
[del_saved]='\e[3J'
[del_line]='\e[K'
[del_line-start]='\e[1K'
[del_line-clear]='\e[2K'
)
	
	for col in "${!cursor[@]}" "${!erase[@]}" ; do
		case $col in
			${1/-*}) cursor="${cursor[$col]}" ;;
			$2) erase="${erase[$col]}" ;;
		esac
	done
	
	printf "${cursor}${erase}"
}

ABSOLUTE_PATH() { # absolute path to script
	local var
	
	[[ $1 ]] && var="/${1}" || var=
	[[ ${0%/*} == ${0##*/} ]] && echo "$var" || echo "${0%/*}${var}"
}


RANDOM_ELEMENT() { # random element from array
	local var
	
	var=($@)
	echo "${var[RANDOM%${#var[@]}]}"
}

UNIQUE_ELEMENT() { # get unique elements from specified arrays
	local col var1 var2
	
	for col in "${arr1[@]}" ; do	
		var1+="^${col}$"
	done

	for col in "${arr2[@]}" ; do
		var2+="^${col}$"
	done

	for col in "${arr1[@]}" "${arr2[@]}" ; do
		[[ $var1 =~ "^${col}$" ]] || printf '%s ' "$col"
		[[ $var2 =~ "^${col}$" ]] || printf '%s ' "$col"
	done
	echo
}

INCREMENT() { # increment by specification
	local init end increment
	
	IFS='=+' read init end icrement <<<$1

	until [[ $init -ge $end ]] ; do
		((init+=$icrement))
		printf '%s ' "$init"
	done
	echo
}

DECREMENT() {
	local init end decrement
	
	IFS='=-' read init end decrement <<<$1

	until [[ $init -le -$end ]] ; do
		init=$((init-$decrement))
		printf '%s ' "$init"
	done
	echo
}

DIVIDE() {
	local numerator denominator

	IFS='/' read numerator denominator <<<$1
	numerator=${numerator//.[0-9]*}
	denominator=${denominator//.[0-9]*}

	echo $((numerator/denominator))
}

MODULUS() {
	local numerator denominator

	IFS='%' read numerator denominator <<<$1
	numerator=${numerator//.[0-9]*}
	denominator=${denominator//.[0-9]*}

	echo $((numerator%denominator))
}

MULTIPLY() {
	local x y

	IFS='*' read x y <<<$1

	echo $((x*y))
}

ADD() {
	local x y
	
	IFS='+' read x y <<<$1

	echo $((x+y))
}

SUBTRACT() {
	local x y

	IFS='-' read x y <<<$1
	
	echo $((x-y))
}

RAINBOW() { # output characters in a rainbow pattern
	local clr char
        
	clr=1
	while read -N1 char ; do
		[[ $clr -le 6 ]] && ((clr++))
		[[ $clr == 7 ]] && clr=1
		[[ $char == ' ' ]] && ((clr--))
		printf '\e[1;3%sm%s\e[0m' "$clr" "$char"
	done <<<$@
}
